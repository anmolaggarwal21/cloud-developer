service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  # addin plugin so that each function uses the required environment and and all are generic
  - serverless-reqvalidator-plugin # plugin for validation
  - serverless-aws-documentation # pre requisite for validation plugin 



provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    ToDoTable: ToDoTable-${self:provider.stage}
    IS_OFFLINE: false
    AttachmentBucket: attachmentbucket-${self:provider.stage}
    USER_ID_INDEX: USERIDINDEX

custom: 
  documentation:
    models:
      - name: ToDoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - Dynamodb:Scan
          - Dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ToDoTable}
      - Effect: Allow
        Action:
          - Dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ToDoTable}/index/${self:provider.environment.USER_ID_INDEX}
  

  # TODO: Configure this function
  
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new to do
            description: Create a new to do
            requestModels:
              'application/json': ToDoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - Dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ToDoTable}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: put
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - Dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ToDoTable}

  # # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - Dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ToDoTable}

  # # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements: 
      - Effect: Allow
        Action: 
          - s3:PutObject 
          - s3:GetObject 
        Resource: arn:aws:s3:::${self:provider.environment.AttachmentBucket}/*

resources:
  Resources:

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # make table for toDoItem
    ToDoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId 
            AttributeType: S
          - AttributeName: userId 
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName : ${self:provider.environment.ToDoTable}

    # adding the bucket for images

    AttachmentsBucket:
      Type: AWS::S3::Bucket 
      Properties:
        BucketName: ${self:provider.environment.AttachmentBucket}
       # NotificationConfiguration:
          # the commented code is used to notify a lambda function where as the topic configuartion is used to notify a topic
         # LambdaConfigurations:
          #- Event: s3:ObjectCreated:*
          #  Function: !GetAtt SendUploadNotificationsLambdaFunction.Arn 
          # commenting the code for the notification to the topic
          # TopicConfigurations:
          #   - Event: s3:ObjectCreated:*
          #     Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET 
                - PUT 
                - POST 
                - DELETE
                - HEAD 
              MaxAge: 3000
    
    # add a bucket policy 
    BucketPolicy:

      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.AttachmentBucket}/*'
        Bucket: !Ref AttachmentsBucket

    # adding a code for the cors header as well as some other code for api gateway 
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Header: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'